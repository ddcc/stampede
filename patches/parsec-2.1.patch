diff -x .git -Naur parsec-2.1-prepatch/.patched parsec-2.1/.patched
--- parsec-2.1-prepatch/.patched	1970-01-01 01:00:00.000000000 +0100
+++ parsec-2.1/.patched	2017-03-21 21:04:45.000000000 +0000
@@ -0,0 +1 @@
+patched
diff -x .git -Naur parsec-2.1-prepatch/CMakeLists.txt parsec-2.1/CMakeLists.txt
--- parsec-2.1-prepatch/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ parsec-2.1/CMakeLists.txt	2017-03-21 11:07:40.000000000 +0000
@@ -0,0 +1,35 @@
+add_definitions(-DPARSEC_VERSION=2.1)
+add_definitions(-DENABLE_PARSEC_HOOKS)
+add_definitions(-DENABLE_THREADS)
+
+# Parsec-specific OpenMP flag is enabled but via GALOIS_CHANGE we don't
+# actually use OpenMP 
+add_definitions(-DENABLE_OPENMP)
+add_definitions(-DGALOIS_CHANGE)
+
+if(USE_TINYSTM)
+  add_definitions(-DUSE_STM)
+elseif(USE_PLAIN)
+  remove_definitions(-DGALOIS_CHANGE)
+else()
+  add_definitions(-DUSE_GALOIS)
+endif()
+
+include_directories(pkgs/libs/hooks/src/include)
+include_directories(${Galois_INCLUDE_DIRS})
+
+#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -funroll-loops -fprefetch-loop-arrays")
+#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -funroll-loops -fprefetch-loop-arrays -fpermissive")
+
+function(app name)
+  add_executable(${name} ${ARGN} ${extra_sources})
+  target_link_libraries(${name} ${CMAKE_THREAD_LIBS_INIT})
+  target_link_libraries(${name} m)
+  target_link_libraries(${name} parsec-hooks)
+  target_link_libraries(${name} ${Galois_LIBRARIES})
+  install(TARGETS ${name} RUNTIME DESTINATION bin)
+endfunction(app)
+
+add_subdirectory(pkgs/libs/hooks)
+
+add_subdirectory(pkgs/kernels/canneal)
diff -x .git -Naur parsec-2.1-prepatch/inputs/CMakeLists.txt parsec-2.1/inputs/CMakeLists.txt
--- parsec-2.1-prepatch/inputs/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ parsec-2.1/inputs/CMakeLists.txt	2017-03-20 19:07:30.000000000 +0000
@@ -0,0 +1 @@
+add_custom_target(more-suites-inputs-parsec ${CMAKE_CURRENT_SOURCE_DIR}/download_native.sh)
diff -x .git -Naur parsec-2.1-prepatch/inputs/download_native.sh parsec-2.1/inputs/download_native.sh
--- parsec-2.1-prepatch/inputs/download_native.sh	1970-01-01 01:00:00.000000000 +0100
+++ parsec-2.1/inputs/download_native.sh	2017-03-20 19:07:30.000000000 +0000
@@ -0,0 +1,18 @@
+#!/bin/bash
+
+set -e # stop on first error
+
+if [[ ! -f parsec-2.1-native.tar.gz ]]; then
+  wget http://parsec.cs.princeton.edu/download/2.1/parsec-2.1-native.tar.gz
+fi
+
+if [[ ! -f parsec-2.1/pkgs/apps/freqmine/inputs/input_native.tar ]]; then
+  tar xzvf parsec-2.1-native.tar.gz
+fi
+
+for app in bodytrack freqmine blackscholes; do
+  if [[ ! -d $app ]]; then
+    mkdir $app
+    tar xvf parsec-2.1/pkgs/apps/$app/inputs/input_native.tar -C $app
+  fi
+done
diff -x .git -Naur parsec-2.1-prepatch/pkgs/apps/blackscholes/CMakeLists.txt parsec-2.1/pkgs/apps/blackscholes/CMakeLists.txt
--- parsec-2.1-prepatch/pkgs/apps/blackscholes/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ parsec-2.1/pkgs/apps/blackscholes/CMakeLists.txt	2017-03-21 10:04:05.000000000 +0000
@@ -0,0 +1,2 @@
+set_source_files_properties(src/blackscholes.c PROPERTIES LANGUAGE CXX)
+app(blackscholes src/blackscholes.c)
diff -x .git -Naur parsec-2.1-prepatch/pkgs/apps/blackscholes/src/blackscholes.c parsec-2.1/pkgs/apps/blackscholes/src/blackscholes.c
--- parsec-2.1-prepatch/pkgs/apps/blackscholes/src/blackscholes.c	2009-07-28 00:58:11.000000000 +0100
+++ parsec-2.1/pkgs/apps/blackscholes/src/blackscholes.c	2017-03-20 19:07:30.000000000 +0000
@@ -27,8 +27,12 @@
 
 // Multi-threaded OpenMP header
 #ifdef ENABLE_OPENMP
+#ifdef GALOIS_CHANGE
+#include "Exp/Parallel.h"
+#else
 #include <omp.h>
 #endif
+#endif
 
 // Multi-threaded header for Windows
 #ifdef WIN32
@@ -232,8 +236,12 @@
 
     for (j=0; j<NUM_RUNS; j++) {
 #ifdef ENABLE_OPENMP
+#ifdef GALOIS_CHANGE
+        parallel_doall(int, i, 0, numOptions) {
+#else
 #pragma omp parallel for
         for (i=0; i<numOptions; i++) {
+#endif
 #else  //ENABLE_OPENMP
         for (i=start; i<end; i++) {
 #endif //ENABLE_OPENMP
@@ -254,8 +262,10 @@
             }
 #endif
         }
+#if defined(ENABLE_OPENMP) && defined(GALOIS_CHANGE)
+      parallel_doall_end
+#endif
     }
-
     return 0;
 }
 
@@ -375,9 +385,14 @@
 #else//ENABLE_THREADS
 #ifdef ENABLE_OPENMP
     {
+#ifdef GALOIS_CHANGE
+        int tid=0;
+        bs_thread(&tid);
+#else
         int tid=0;
         omp_set_num_threads(nThreads);
         bs_thread(&tid);
+#endif
     }
 #else //ENABLE_OPENMP
 #ifdef WIN32 
diff -x .git -Naur parsec-2.1-prepatch/pkgs/apps/bodytrack/CMakeLists.txt parsec-2.1/pkgs/apps/bodytrack/CMakeLists.txt
--- parsec-2.1-prepatch/pkgs/apps/bodytrack/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ parsec-2.1/pkgs/apps/bodytrack/CMakeLists.txt	2017-03-21 10:04:21.000000000 +0000
@@ -0,0 +1,22 @@
+add_definitions(-DUSE_OPENMP=1)
+include(CheckIncludeFile)
+CHECK_INCLUDE_FILE("stdint.h" HAVE_STDINT_H)
+if(HAVE_STDINT_H)
+  add_definitions(-DHAVE_STDINT_H)
+endif()
+
+include_directories(src/FlexImageLib)
+file(GLOB Lib src/FlexImageLib/*.cpp)
+set(Sources
+  src/TrackingBenchmark/AnnealingFactor.cpp
+  src/TrackingBenchmark/CameraModel.cpp
+  src/TrackingBenchmark/main.cpp
+  src/TrackingBenchmark/CovarianceMatrix.cpp
+  src/TrackingBenchmark/RandomGenerator.cpp
+  src/TrackingBenchmark/BodyGeometry.cpp
+  src/TrackingBenchmark/ImageMeasurements.cpp 
+  src/TrackingBenchmark/TrackingModel.cpp
+  src/TrackingBenchmark/BodyPose.cpp
+  src/TrackingBenchmark/ImageProjection.cpp
+  src/TrackingBenchmark/TrackingModelOMP.cpp)
+app(bodytrack ${Sources} ${Lib})
diff -x .git -Naur parsec-2.1-prepatch/pkgs/apps/bodytrack/src/TrackingBenchmark/ParticleFilterOMP.h parsec-2.1/pkgs/apps/bodytrack/src/TrackingBenchmark/ParticleFilterOMP.h
--- parsec-2.1-prepatch/pkgs/apps/bodytrack/src/TrackingBenchmark/ParticleFilterOMP.h	2008-07-11 20:21:02.000000000 +0100
+++ parsec-2.1/pkgs/apps/bodytrack/src/TrackingBenchmark/ParticleFilterOMP.h	2017-03-20 19:07:30.000000000 +0000
@@ -23,7 +23,11 @@
 # include "config.h"
 #endif
 
+#ifdef GALOIS_CHANGE
+#include "Exp/Parallel.h"
+#else
 #include <omp.h>
+#endif
 #include "ParticleFilter.h"
 
 template<class T> 
@@ -64,13 +68,25 @@
 	mWeights.resize(particles.size());
 
 	int np = (int)particles.size(), j;
+#ifdef GALOIS_CHANGE
+        ParticleFilterOMP<T>* self = this;
+        parallel_doall_1(int, j, 0, np)
+	{	bool vflag;
+                int n = Exp::getTID();
+		self->mWeights[j] = self->mModel->LogLikelihood(particles[j], vflag, n);						//compute log-likelihood weights for each particle
+		valid[j] = vflag ? 1 : 0;
+	}
+        parallel_doall_end
+#else
 	#pragma omp parallel for																//OpenMP parallelized loop to compute log-likelihoods
 	for(j = 0; j < np; j++) 
 	{	bool vflag;
 		int n = omp_get_thread_num();
-		mWeights[j] = mModel->LogLikelihood(particles[j], vflag, n);						//compute log-likelihood weights for each particle
+		XXX mWeights[j] = mModel->LogLikelihood(particles[j], vflag, n);						//compute log-likelihood weights for each particle
 		valid[j] = vflag ? 1 : 0;
 	}
+#endif
+
 	uint i = 0;
 	while(i < particles.size())
 	{	if(!valid[i])																		//if not valid(model prior), remove the particle from the list
@@ -108,11 +124,21 @@
 	for(int i = 0; i < (int)mBins.size(); i++)										
 		for(uint j = 0; j < mBins[i]; j++)													//index particles to be regenerated
 			mIndex[p++] = i;
+
+#ifdef GALOIS_CHANGE
+        ParticleFilterOMP<T>* self = this;
+        parallel_doall(int, i, 0, mNParticles)
+	{	self->mNewParticles[i] = self->mParticles[self->mIndex[i]];											//add new particle for each entry in each bin distributed randomly about duplicated particle
+		self->AddGaussianNoise(self->mNewParticles[i], self->mModel->StdDevs()[k], self->mRnd[i]);
+	}
+        parallel_doall_end
+#else
 	#pragma omp parallel for
 	for(int i = 0; i < mNParticles; i++)													//distribute new particles randomly according to model stdDevs
 	{	mNewParticles[i] = mParticles[mIndex[i]];											//add new particle for each entry in each bin distributed randomly about duplicated particle
 		AddGaussianNoise(mNewParticles[i], mModel->StdDevs()[k], mRnd[i]);
 	}
+#endif
 }
 
 
diff -x .git -Naur parsec-2.1-prepatch/pkgs/apps/bodytrack/src/TrackingBenchmark/TrackingModelOMP.cpp parsec-2.1/pkgs/apps/bodytrack/src/TrackingBenchmark/TrackingModelOMP.cpp
--- parsec-2.1-prepatch/pkgs/apps/bodytrack/src/TrackingBenchmark/TrackingModelOMP.cpp	2008-07-07 17:42:42.000000000 +0100
+++ parsec-2.1/pkgs/apps/bodytrack/src/TrackingBenchmark/TrackingModelOMP.cpp	2017-03-20 19:07:30.000000000 +0000
@@ -25,6 +25,10 @@
 #include <omp.h>
 #include "system.h"
 
+#ifdef GALOIS_CHANGE
+#include "Exp/Parallel.h"
+#endif
+
 using namespace std;
 
 
@@ -40,8 +44,12 @@
 		dst.Reallocate(src.Size());
 	dst.Set((T)0);
 	int n = kernelSize / 2, h = src.Height();
+#ifdef GALOIS_CHANGE
+        parallel_doall(int, y, 0, h)
+#else
 	#pragma omp parallel for
 	for(int y = 0; y < h; y++)
+#endif
 	{	T *psrc = &src(n, y), *pdst = &dst(n, y);
 		for(int x = n; x < src.Width() - n; x++)
 		{	int k = 0;
@@ -53,6 +61,9 @@
 			psrc++;
 		}
 	}
+#ifdef GALOIS_CHANGE
+        parallel_doall_end
+#endif
 	return true;
 }
 
@@ -67,8 +78,12 @@
 	dst.Set((T)0);
 	int n = kernelSize / 2;
 	int sb = src.StepBytes(), h = src.Height() - n;
+#ifdef GALOIS_CHANGE
+        parallel_doall(int, y, n, h)
+#else
 	#pragma omp parallel for
 	for(int y = n; y < h; y++)
+#endif
 	{	T *psrc = &src(0, y), *pdst = &dst(0, y);
 		for(int x = 0; x < src.Width(); x++)
 		{	int k = 0;
@@ -80,6 +95,9 @@
 			psrc++;
 		}
 	}
+#ifdef GALOIS_CHANGE
+        parallel_doall_end
+#endif
 	return true;
 }
 
@@ -100,8 +118,12 @@
 {
 	FlexImage8u r(src.Size());
 	ZeroBorder(r);
+#ifdef GALOIS_CHANGE
+        parallel_doall(int, y, 1, src.Height() - 1)
+#else
 	#pragma omp parallel for
 	for(int y = 1; y < src.Height() - 1; y++)																					//for each pixel
+#endif
 	{	Im8u *p = &src(1,y), *ph = &src(1,y - 1), *pl = &src(1,y + 1), *pr = &r(1,y);
 		for(int x = 1; x < src.Width() - 1; x++)
 		{	float xg = -0.125f * ph[-1] + 0.125f * ph[1] - 0.250f * p[-1] + 0.250f * p[1] - 0.125f * pl[-1] + 0.125f * pl[1];	//calc x and y gradients
@@ -111,6 +133,9 @@
 			p++; ph++; pl++; pr++;
 		}
 	}
+#ifdef GALOIS_CHANGE
+        parallel_doall_end
+#endif
 	return r;
 }
 
@@ -155,4 +180,4 @@
 		CreateEdgeMap(im, mEdgeMaps[i]);										//Create edge maps
 	}
 	return true;
-}
\ No newline at end of file
+}
diff -x .git -Naur parsec-2.1-prepatch/pkgs/apps/bodytrack/src/TrackingBenchmark/main.cpp parsec-2.1/pkgs/apps/bodytrack/src/TrackingBenchmark/main.cpp
--- parsec-2.1-prepatch/pkgs/apps/bodytrack/src/TrackingBenchmark/main.cpp	2008-11-06 20:01:14.000000000 +0000
+++ parsec-2.1/pkgs/apps/bodytrack/src/TrackingBenchmark/main.cpp	2017-03-20 19:07:30.000000000 +0000
@@ -38,7 +38,9 @@
 //#define USE_TBB
 
 #if defined(USE_OPENMP)
+#ifndef GALOIS_CHANGE
 #include <omp.h>
+#endif
 #include "ParticleFilterOMP.h"
 #include "TrackingModelOMP.h"
 #endif //USE_OPENMP
@@ -163,12 +165,13 @@
 int mainOMP(string path, int cameras, int frames, int particles, int layers, int threads, bool OutputBMP)
 {
 	cout << "Threading with OpenMP" << endl;
+#ifndef GALOIS_CHANGE
 	if(threads < 1)																		//Set number of threads used by OpenMP
 		omp_set_num_threads(omp_get_num_procs());										//use number of processors by default
 	else
 		omp_set_num_threads(threads);
 	cout << "Number of Threads : " << omp_get_max_threads() << endl;
-
+#endif
 	TrackingModelOMP model;
 	if(!model.Initialize(path, cameras, layers))										//Initialize model parameters
 	{	cout << endl << "Error loading initialization data." << endl;
diff -x .git -Naur parsec-2.1-prepatch/pkgs/apps/freqmine/CMakeLists.txt parsec-2.1/pkgs/apps/freqmine/CMakeLists.txt
--- parsec-2.1-prepatch/pkgs/apps/freqmine/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ parsec-2.1/pkgs/apps/freqmine/CMakeLists.txt	2017-03-21 10:04:33.000000000 +0000
@@ -0,0 +1,3 @@
+file(GLOB Sources src/*.cpp)
+#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32") 
+add(freqmine ${Sources})
diff -x .git -Naur parsec-2.1-prepatch/pkgs/apps/freqmine/src/fp_tree.cpp parsec-2.1/pkgs/apps/freqmine/src/fp_tree.cpp
--- parsec-2.1-prepatch/pkgs/apps/freqmine/src/fp_tree.cpp	2009-01-21 16:09:15.000000000 +0000
+++ parsec-2.1/pkgs/apps/freqmine/src/fp_tree.cpp	2017-03-20 19:07:30.000000000 +0000
@@ -42,12 +42,19 @@
 #include "common.h"
 #include "wtime.h"
 
+#ifdef GALOIS_CHANGE
+#include "Exp/Parallel.h"
+#include <pthread.h>
+static int omp_get_max_threads() { return Exp::getNumThreads(); }
+static int omp_get_thread_num() { return Exp::getTID(); }
+#else
 #ifdef _OPENMP
 #include <omp.h>
 #else
 static int omp_get_max_threads() {return 1;}
 static int omp_get_thread_num() {return 0;}
 #endif //_OPENMP
+#endif
 
 #define fast_rightsib_table_size 16
 int ***currentnodeiter;
@@ -207,8 +214,12 @@
 	}
 	new_data_num[0][0] = sum_new_data_num;
 	T *ItemArray = (T *)local_buf->newbuf(1, new_data_num[0][0] * sizeof(T));
+#ifdef GALOIS_CHANGE
+        parallel_doall_1(int, j, 0, workingthread) {
+#else
 #pragma omp parallel for
 	for (j = 0; j < workingthread; j ++) {
+#endif
 		int kept_itemiter;
 		int itemiter = content_offset_array[j] - 1;
 		int stacktop;
@@ -282,6 +293,9 @@
 			}
 		}
 	}
+#ifdef GALOIS_CHANGE
+        parallel_doall_end
+#endif
 	fptree->ItemArray = (int *) ItemArray;
 }
 
@@ -529,8 +543,12 @@
 		for (j = local_num_hot_item; j < local_itemno; j ++)
 			origin[i][j] = 1;
 	}
+#ifdef GALOIS_CHANGE
+        parallel_doall_1(int, i, 0, mapfile->tablesize) {
+#else
 #pragma omp parallel for schedule(dynamic,1)
 	for (i = 0; i < mapfile->tablesize; i ++) {
+#endif
 		int k, l;
 		int *content;
 		MapFileNode *currentnode;
@@ -623,6 +641,9 @@
 			currentnode->finalize();
 			thread_pos[thread] = currentpos;
 	}
+#ifdef GALOIS_CHANGE
+        parallel_doall_end
+#endif
 	
 	for (i = 0; i < workingthread; i ++) {
 		thread_pos[i] = 0;
@@ -713,8 +734,12 @@
 			}
 		}
 
+#ifdef GALOIS_CHANGE
+        parallel_doall_1(int, i, 0, workingthread) {
+#else
 #pragma omp parallel for
 	for (i = 0; i < workingthread; i ++) {
+#endif
 		MapFileNode *current_mapfilenode;
 		unsigned short * content;
 		int k, size, current_pos, ntype, has;
@@ -738,6 +763,9 @@
 			current_mapfilenode = current_mapfilenode->next;
 		}
 	}
+#ifdef GALOIS_CHANGE
+        parallel_doall_end
+#endif
 	delete [] tempntypeoffsetbase;
 	delete [] thread_pos;
 }
@@ -865,9 +893,15 @@
 			hot_node_index[i] = j;
 	}
 	hot_node_depth[0] = 0;
+
+#ifdef GALOIS_CHANGE
+        parallel_doall_1(int, k, 0, workingthread) {
+#else
 	#pragma omp parallel for
 	for (int k = 0; k < workingthread; k ++) {
+#endif
 		int i;
+#ifndef GALOIS_CHANGE
 #ifdef __linux__
 #ifdef CPU_SETSIZE
 		cpu_set_t cpu_mask; 
@@ -880,6 +914,7 @@
 		sched_setaffinity(k, sizeof(unsigned long), &cpu_mask);
 #endif
 #endif
+#endif
 		currentnodeiter[k] = (int**)fp_buf[k]->newbuf(1, itemno * (14 + fast_rightsib_table_size) * sizeof(int *) + num_hot_node * 2 * sizeof(int *)  + (fast_rightsib_table_size * itemno) * sizeof(int *) + fast_rightsib_table_size + 3 * sizeof(int*));
 		nodestack[k] = (Fnode**)(currentnodeiter[k] + itemno);
 		itemstack[k] = (int*)(nodestack[k] + itemno);
@@ -922,6 +957,9 @@
 			bran[k][i] = 0;
 		}
 	}
+#ifdef GALOIS_CHANGE
+        parallel_doall_end
+#endif
 	mapfile->transform_list_table();
 	for (i = 0; i < hot_node_num; i ++)
 		ntypeidarray[i] = i;
@@ -1049,8 +1087,12 @@
 	wtime(&tstart);
 	database_tiling(workingthread);
 	Fnode **local_hashtable = hashtable[0];
+#ifdef GALOIS_CHANGE
+        parallel_doall_1(int, j, 0, mergedworknum) {
+#else
 #pragma omp parallel for schedule(dynamic,1)
 	for (j = 0; j < mergedworknum; j ++) {
+#endif
 		int thread = omp_get_thread_num();
 		int localthreadworkloadnum = threadworkloadnum[thread];
 		int *localthreadworkload = threadworkload[thread];
@@ -1154,6 +1196,9 @@
 		rightsib_backpatch_count[thread][0] = local_rightsib_backpatch_count;
 		threadworkloadnum[thread] = localthreadworkloadnum;
 	}
+#ifdef GALOIS_CHANGE
+        parallel_doall_end
+#endif
 	delete database_buf;
 	
 	for (int i = 0; i < workingthread; i ++) {
@@ -1163,13 +1208,20 @@
 	}
 	int totalnodes = cal_level_25(0);
 	
+#ifdef GALOIS_CHANGE
+        parallel_doall_1(int, j, 0, workingthread) {
+#else
 #pragma omp parallel for
 	for (j = 0; j < workingthread; j ++) {
+#endif
 		int local_rightsib_backpatch_count = rightsib_backpatch_count[j][0];
 		Fnode ***local_rightsib_backpatch_stack = rightsib_backpatch_stack[j];
 		for (int i = 0; i < local_rightsib_backpatch_count; i ++)
 			*local_rightsib_backpatch_stack[i] = NULL;
 	}
+#ifdef GALOIS_CHANGE
+        parallel_doall_end
+#endif
 	wtime(&tend);
 //	printf("Creating the first tree from source file cost %f seconds\n", tend - tstart);
 //       printf("we have %d nodes in the initial FP tree\n", totalnodes);
@@ -1244,6 +1296,10 @@
 	return true;
 }
 
+#ifdef GALOIS_CHANGE
+pthread_mutex_t release_node_array_after_mining_lock = PTHREAD_MUTEX_INITIALIZER;
+#endif
+
 void FP_tree::release_node_array_after_mining(int sequence, int thread, int workingthread)
 {
 	int current, i;
@@ -1254,17 +1310,28 @@
 			current = thread_finish_status[i];
 	}
 {
+#ifdef GALOIS_CHANGE
+        pthread_mutex_lock(&release_node_array_after_mining_lock);
+#else
 #pragma omp critical
+#endif
 	{
 		if (current < released_pos) {
 			released_pos = current;
 			fp_node_sub_buf->freebuf(MR_nodes[current], MC_nodes[current], MB_nodes[current]);
 		}
 	}
+#ifdef GALOIS_CHANGE
+        pthread_mutex_unlock(&release_node_array_after_mining_lock);
+#endif
 }
 
 }
 
+#ifdef GALOIS_CHANGE
+pthread_mutex_t release_node_array_before_mining_lock = PTHREAD_MUTEX_INITIALIZER;
+#endif
+
 void FP_tree::release_node_array_before_mining(int sequence, int thread, int workingthread)
 {
 	int current, i;
@@ -1276,13 +1343,20 @@
 	}
 	current ++;
 {
+#ifdef GALOIS_CHANGE
+        pthread_mutex_lock(&release_node_array_before_mining_lock);
+#else
 #pragma omp critical
+#endif
 	{
 		if (current < released_pos) {
 			released_pos = current;
 			fp_node_sub_buf->freebuf(MR_nodes[current], MC_nodes[current], MB_nodes[current]);
 		}
 	}
+#ifdef GALOIS_CHANGE
+        pthread_mutex_unlock(&release_node_array_before_mining_lock);
+#endif
 }
 
 }
@@ -1340,9 +1414,15 @@
 			}
 		}
 
+#ifdef GALOIS_CHANGE
+                parallel_doall_1(int, sequenceprime, 0, upperbound-lowerbound + 1) {
+                        int sequence = upperbound - 1 - sequenceprime;
+#else
 		#pragma omp parallel for schedule(dynamic,1)
 		for(sequence=upperbound - 1; sequence>=lowerbound; sequence--)
-		{	int current, new_item_no, listlen;
+		{	
+#endif
+                  	int current, new_item_no, listlen;
 			int MC2=0;			
 			unsigned int MR2=0;	
 			char* MB2;		
@@ -1381,7 +1461,11 @@
 				}
 				local_list->top=listlen-1;
 				release_node_array_after_mining(sequence, thread, workingthread);
+#ifdef GALOIS_CHANGE
+                                goto loop_end;
+#else
 				continue;
+#endif
 			}
 
 			FP_tree *fptree;
@@ -1421,7 +1505,13 @@
 				local_list->top = listlen-1;
 			}
 			release_node_array_after_mining(sequence, thread, workingthread);
+#ifdef GALOIS_CHANGE
+loop_end:               ;
+#endif
 		}
+#ifdef GALOIS_CHANGE
+                parallel_doall_end
+#endif
 	}
 	 wtime(&tend);
 //	 printf("the major FP_growth cost %f vs %f seconds\n", tend - tstart, temp_time - tstart);
diff -x .git -Naur parsec-2.1-prepatch/pkgs/kernels/canneal/CMakeLists.txt parsec-2.1/pkgs/kernels/canneal/CMakeLists.txt
--- parsec-2.1-prepatch/pkgs/kernels/canneal/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ parsec-2.1/pkgs/kernels/canneal/CMakeLists.txt	2017-03-20 19:38:36.000000000 +0000
@@ -0,0 +1,6 @@
+app(canneal 
+  src/annealer_thread.cpp
+  src/main.cpp
+  src/netlist.cpp
+  src/netlist_elem.cpp
+  src/rng.cpp)
diff -x .git -Naur parsec-2.1-prepatch/pkgs/kernels/canneal/src/AtomicPtr.h parsec-2.1/pkgs/kernels/canneal/src/AtomicPtr.h
--- parsec-2.1-prepatch/pkgs/kernels/canneal/src/AtomicPtr.h	2009-07-30 21:25:44.000000000 +0100
+++ parsec-2.1/pkgs/kernels/canneal/src/AtomicPtr.h	2017-03-20 11:07:57.000000000 +0000
@@ -92,7 +92,11 @@
 #define ATOMICPTR_H
 
 //uncomment to compile with additional error checks
+#ifdef GALOIS_CHANGE
+#include "Galois/Runtime/Context.h"
+#else
 #define NDEBUG
+#endif
 
 #include <cassert>
 #include "atomic/atomic.h"
@@ -101,8 +105,14 @@
 namespace threads {
 
 template <typename T>
-class AtomicPtr {
-  private:
+class AtomicPtr 
+#if defined(GALOIS_CHANGE) && defined(USE_GALOIS)
+  : public Galois::Runtime::Lockable
+#endif
+{
+#if defined(GALOIS_CHANGE)
+  public:
+#endif
     //the pointer to access atomically and types to use for access (32-bit or 64-bit width)
 #if defined(_LP64)
     typedef long unsigned int ATOMIC_TYPE;
diff -x .git -Naur parsec-2.1-prepatch/pkgs/kernels/canneal/src/annealer_thread.cpp parsec-2.1/pkgs/kernels/canneal/src/annealer_thread.cpp
--- parsec-2.1-prepatch/pkgs/kernels/canneal/src/annealer_thread.cpp	2008-12-08 21:00:46.000000000 +0000
+++ parsec-2.1/pkgs/kernels/canneal/src/annealer_thread.cpp	2017-03-20 11:07:57.000000000 +0000
@@ -40,6 +40,17 @@
 #include <fstream>
 #include "rng.h"
 
+#ifdef GALOIS_CHANGE
+#include "Galois/Galois.h"
+#include "Galois/Accumulator.h"
+#include "Galois/Runtime/Barrier.h"
+#include "Galois/Runtime/PerThreadStorage.h"
+#ifdef USE_STM
+#include "Galois/Runtime/Stm.h"
+#endif
+#endif
+
+
 using std::cout;
 using std::endl;
 
@@ -47,6 +58,69 @@
 //*****************************************************************************************
 //
 //*****************************************************************************************
+#if defined(GALOIS_CHANGE) && defined(USE_GALOIS)
+void annealer_thread::Run()
+{
+	int accepted_good_moves=0;
+	int accepted_bad_moves=-1;
+	//double T = _start_temp;
+        Galois::Runtime::PerThreadStorage<Rng> rngs; //store of randomness
+        Galois::Runtime::PerThreadStorage<netlist_elem*> as;
+        Galois::Runtime::PerThreadStorage<netlist_elem*> bs;
+        Galois::Runtime::PerThreadStorage<long> a_ids;
+        Galois::Runtime::PerThreadStorage<long> b_ids;
+        Galois::Runtime::PerThreadStorage<double> Ts(_start_temp / 1.5);
+        Galois::Runtime::PerThreadStorage<int> local_moves;
+
+        //Galois::GAccumulator<int> accepted_good_reducer;
+        //Galois::GAccumulator<int> accepted_bad_reducer;
+
+	int temp_steps_completed=0; 
+	//while(keep_going(temp_steps_completed, accepted_good_moves, accepted_bad_moves)){
+		//T = T / 1.5;
+		//accepted_good_reducer.reset();
+		//accepted_bad_reducer.reset();
+                Galois::for_each(boost::counting_iterator<int>(0),
+                    boost::counting_iterator<int>(_moves_per_thread_temp * _nthreads * _number_temp_steps),
+                    [&](int i, Galois::UserContext<int>&) {
+                        Rng& rng = *rngs.getLocal();
+                        netlist_elem*& a = *as.getLocal();
+                        netlist_elem*& b = *bs.getLocal();
+                        long& a_id = *a_ids.getLocal();
+                        long& b_id = *b_ids.getLocal();
+                        double& T = *Ts.getLocal();
+
+                        if (!a)
+                          a = _netlist->get_random_element(&a_id, NO_MATCHING_ELEMENT, &rng);
+                        if (!b)
+                          b = _netlist->get_random_element(&b_id, NO_MATCHING_ELEMENT, &rng);
+
+			//get a new element. Only get one new element, so that reuse should help the cache
+			a = b;
+			a_id = b_id;
+			b = _netlist->get_random_element(&b_id, a_id, &rng);
+			
+			routing_cost_t delta_cost = calculate_delta_routing_cost(a,b);
+			move_decision_t is_good_move = accept_move(delta_cost, T, &rng);
+			//make the move, and update stats:
+			if (is_good_move == move_decision_accepted_bad){
+				_netlist->swap_locations(a,b);
+				//accepted_bad_reducer += 1;
+			} else if (is_good_move == move_decision_accepted_good){
+				_netlist->swap_locations(a,b);
+				//accepted_good_reducer += 1;
+			} else if (is_good_move == move_decision_rejected){
+				//no need to do anything for a rejected move
+			}
+                        if ((++(*local_moves.getLocal()) % _moves_per_thread_temp) == 0)
+                          T = T / 1.5;
+		});
+                //accepted_good_moves = accepted_good_reducer.reduce();
+                //accepted_bad_moves = accepted_bad_reducer.reduce();
+		//temp_steps_completed++;
+	//}
+}
+#else
 void annealer_thread::Run()
 {
 	int accepted_good_moves=0;
@@ -71,19 +145,24 @@
 			a_id = b_id;
 			b = _netlist->get_random_element(&b_id, a_id, &rng);
 			
+#if defined(GALOIS_CHANGE) && defined(USE_STM)
+                        GALOIS_STM_BEGIN();
+#endif
 			routing_cost_t delta_cost = calculate_delta_routing_cost(a,b);
 			move_decision_t is_good_move = accept_move(delta_cost, T, &rng);
-
 			//make the move, and update stats:
 			if (is_good_move == move_decision_accepted_bad){
-				accepted_bad_moves++;
 				_netlist->swap_locations(a,b);
+				accepted_bad_moves++;
 			} else if (is_good_move == move_decision_accepted_good){
-				accepted_good_moves++;
 				_netlist->swap_locations(a,b);
+				accepted_good_moves++;
 			} else if (is_good_move == move_decision_rejected){
 				//no need to do anything for a rejected move
 			}
+#if defined(GALOIS_CHANGE) && defined(USE_STM)
+                        GALOIS_STM_END();
+#endif
 		}
 		temp_steps_completed++;
 #ifdef ENABLE_THREADS
@@ -91,6 +170,7 @@
 #endif
 	}
 }
+#endif
 
 //*****************************************************************************************
 //
@@ -117,12 +197,21 @@
 //*****************************************************************************************
 routing_cost_t annealer_thread::calculate_delta_routing_cost(netlist_elem* a, netlist_elem* b)
 {
+#if defined(GALOIS_CHANGE) && defined(USE_STM)
+        location_t* a_loc = (location_t*) GALOIS_STM_READ_WORD(a->present_loc.p);
+        location_t* b_loc = (location_t*) GALOIS_STM_READ_WORD(b->present_loc.p);
+#elif defined(GALOIS_CHANGE) && defined(USE_GALOIS)
+        Galois::Runtime::acquire(&a->present_loc, Galois::MethodFlag::ALL);
+        Galois::Runtime::acquire(&b->present_loc, Galois::MethodFlag::ALL);
+        location_t* a_loc = a->present_loc.p;
+        location_t* b_loc = b->present_loc.p;
+#else
 	location_t* a_loc = a->present_loc.Get();
 	location_t* b_loc = b->present_loc.Get();
+#endif
 	
 	routing_cost_t delta_cost = a->swap_cost(a_loc, b_loc);
 	delta_cost += b->swap_cost(b_loc, a_loc);
-
 	return delta_cost;
 }
 
diff -x .git -Naur parsec-2.1-prepatch/pkgs/kernels/canneal/src/annealer_thread.h parsec-2.1/pkgs/kernels/canneal/src/annealer_thread.h
--- parsec-2.1-prepatch/pkgs/kernels/canneal/src/annealer_thread.h	2008-12-08 21:00:49.000000000 +0000
+++ parsec-2.1/pkgs/kernels/canneal/src/annealer_thread.h	2017-03-20 11:07:57.000000000 +0000
@@ -63,6 +63,9 @@
 	_moves_per_thread_temp(swaps_per_temp/nthreads),
 	_start_temp(start_temp),
 	_number_temp_steps(number_temp_steps)
+#ifdef GALOIS_CHANGE
+          , _nthreads(nthreads)
+#endif
 	{
 		assert(_netlist != NULL);
 #ifdef ENABLE_THREADS
@@ -91,6 +94,9 @@
 #ifdef ENABLE_THREADS
 	pthread_barrier_t _barrier;
 #endif
+#ifdef GALOIS_CHANGE
+        int _nthreads;
+#endif
 };
 
 #endif
diff -x .git -Naur parsec-2.1-prepatch/pkgs/kernels/canneal/src/main.cpp parsec-2.1/pkgs/kernels/canneal/src/main.cpp
--- parsec-2.1-prepatch/pkgs/kernels/canneal/src/main.cpp	2008-12-08 21:00:49.000000000 +0000
+++ parsec-2.1/pkgs/kernels/canneal/src/main.cpp	2017-03-20 11:07:57.000000000 +0000
@@ -47,6 +47,10 @@
 #include "netlist.h"
 #include "rng.h"
 
+#ifdef GALOIS_CHANGE
+#include "Galois/Galois.h"
+#endif
+
 using namespace std;
 
 void* entry_pt(void*);
@@ -57,7 +61,7 @@
 #ifdef PARSEC_VERSION
 #define __PARSEC_STRING(x) #x
 #define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
-        cout << "PARSEC Benchmark Suite Version "__PARSEC_XSTRING(PARSEC_VERSION) << endl << flush;
+        cout << "PARSEC Benchmark Suite Version " __PARSEC_XSTRING(PARSEC_VERSION) << endl << flush;
 #else
         cout << "PARSEC Benchmark Suite" << endl << flush;
 #endif //PARSEC_VERSION
@@ -81,7 +85,10 @@
 		exit(1);
 	}
 #endif
-		
+#ifdef GALOIS_CHANGE	
+        Galois::StatManager SM;
+        Galois::setActiveThreads(num_threads);
+#endif
 	//argument 2 is the num moves / temp
 	int swaps_per_temp = atoi(argv[2]);
 	cout << swaps_per_temp << " swaps per temperature step" << endl;
@@ -110,6 +117,15 @@
 	__parsec_roi_begin();
 #endif
 #ifdef ENABLE_THREADS
+#if defined(GALOIS_CHANGE)
+#ifdef USE_STM
+        Galois::on_each([&](unsigned id, unsigned) {
+          a_thread.Run();
+        });
+#else
+        a_thread.Run();
+#endif
+#else
 	std::vector<pthread_t> threads(num_threads);
 	void* thread_in = static_cast<void*>(&a_thread);
 	for(int i=0; i<num_threads; i++){
@@ -118,6 +134,7 @@
 	for (int i=0; i<num_threads; i++){
 		pthread_join(threads[i], NULL);
 	}
+#endif
 #else
 	a_thread.Run();
 #endif
diff -x .git -Naur parsec-2.1-prepatch/pkgs/kernels/canneal/src/netlist.cpp parsec-2.1/pkgs/kernels/canneal/src/netlist.cpp
--- parsec-2.1-prepatch/pkgs/kernels/canneal/src/netlist.cpp	2008-12-08 21:00:49.000000000 +0000
+++ parsec-2.1/pkgs/kernels/canneal/src/netlist.cpp	2017-03-20 11:07:57.000000000 +0000
@@ -36,6 +36,12 @@
 #include <iostream>
 #include <assert.h>
 
+#ifdef GALOIS_CHANGE
+#ifdef USE_STM
+#include "Galois/Runtime/Stm.h"
+#endif
+#endif
+
 using namespace std;
 
 void netlist::release(netlist_elem* elem)
@@ -81,7 +87,21 @@
 void netlist::swap_locations(netlist_elem* elem_a, netlist_elem* elem_b)
 {
 	//and swap the locations stored in the actual netlist_elem
+#if defined(GALOIS_CHANGE) && defined(USE_STM)
+  auto a = GALOIS_STM_READ_WORD(elem_a->present_loc.p);
+  auto b = GALOIS_STM_READ_WORD(elem_b->present_loc.p);
+  GALOIS_STM_WRITE_WORD(elem_a->present_loc.p, b);
+  GALOIS_STM_WRITE_WORD(elem_b->present_loc.p, a);
+#elif defined(GALOIS_CHANGE) && defined(USE_GALOIS)
+  //Galois::Runtime::acquire(&elem_a->present_loc, Galois::MethodFlag::ALL);
+  //Galois::Runtime::acquire(&elem_b->present_loc, Galois::MethodFlag::ALL);
+  auto a = elem_a->present_loc.p;
+  auto b = elem_b->present_loc.p;
+  elem_a->present_loc.p = b;
+  elem_b->present_loc.p = a;
+#else
 	elem_a->present_loc.Swap(elem_b->present_loc);
+#endif
 }
 
 
@@ -165,7 +185,11 @@
 	assert(_num_elements < _chip_size);
 	
 	//create a chip of the right size
+#if defined(GALOIS_CHANGE) && defined(USE_GALOIS)
+	_elements.create(_chip_size);
+#else
 	_elements.resize(_chip_size);
+#endif
 	
 	cout << "locs created" << endl;
 	//create the location elements
diff -x .git -Naur parsec-2.1-prepatch/pkgs/kernels/canneal/src/netlist.h parsec-2.1/pkgs/kernels/canneal/src/netlist.h
--- parsec-2.1-prepatch/pkgs/kernels/canneal/src/netlist.h	2008-12-08 21:00:49.000000000 +0000
+++ parsec-2.1/pkgs/kernels/canneal/src/netlist.h	2017-03-20 11:07:57.000000000 +0000
@@ -36,6 +36,10 @@
 
 #include "annealer_types.h"
 
+#if defined(GALOIS_CHANGE) && defined(USE_GALOIS)
+#include "Galois/LargeArray.h"
+#endif
+
 const long NO_MATCHING_ELEMENT = -1;
 
 class netlist_elem;
@@ -61,7 +65,11 @@
 	unsigned _max_x;
 	unsigned _max_y;
 	unsigned _chip_size;
+#if defined(GALOIS_CHANGE) && defined(USE_GALOIS)
+        Galois::LargeArray<netlist_elem> _elements;
+#else
 	std::vector<netlist_elem> _elements;//store the actual elements here
+#endif
 	std::vector< std::vector<location_t> > _locations;//store the actual locations here
 	std::map<std::string, netlist_elem*> _elem_names;
 	netlist_elem* create_elem_if_necessary(std::string& name);
diff -x .git -Naur parsec-2.1-prepatch/pkgs/kernels/canneal/src/netlist_elem.cpp parsec-2.1/pkgs/kernels/canneal/src/netlist_elem.cpp
--- parsec-2.1-prepatch/pkgs/kernels/canneal/src/netlist_elem.cpp	2008-12-08 21:00:49.000000000 +0000
+++ parsec-2.1/pkgs/kernels/canneal/src/netlist_elem.cpp	2017-03-20 11:07:57.000000000 +0000
@@ -35,6 +35,11 @@
 #include "netlist_elem.h"
 
 
+#ifdef GALOIS_CHANGE
+#ifdef USE_STM
+#include "Galois/Runtime/Stm.h"
+#endif
+#endif
 
 
 netlist_elem::netlist_elem()
@@ -78,7 +83,14 @@
 	routing_cost_t yes_swap = 0;
 	
 	for (int i = 0; i< fanin.size(); ++i){
+#if defined(GALOIS_CHANGE) && defined(USE_STM)
+                location_t* fanin_loc = (location_t*) GALOIS_STM_READ_WORD(fanin[i]->present_loc.p);
+#elif defined(GALOIS_CHANGE) && defined(USE_GALOIS)
+                Galois::Runtime::acquire(&fanin[i]->present_loc, Galois::MethodFlag::ALL);
+                location_t* fanin_loc = (location_t*) (fanin[i]->present_loc.p);
+#else
 		location_t* fanin_loc = fanin[i]->present_loc.Get();
+#endif
 		no_swap += fabs(old_loc->x - fanin_loc->x);
 		no_swap += fabs(old_loc->y - fanin_loc->y);
 		
@@ -87,7 +99,14 @@
 	}
 	
 	for (int i = 0; i< fanout.size(); ++i){
+#if defined(GALOIS_CHANGE) && defined(USE_STM)
+                location_t* fanout_loc = (location_t*) GALOIS_STM_READ_WORD(fanout[i]->present_loc.p);
+#elif defined(GALOIS_CHANGE) && defined(USE_GALOIS)
+                Galois::Runtime::acquire(&fanout[i]->present_loc, Galois::MethodFlag::ALL);
+                location_t* fanout_loc = (location_t*) (fanout[i]->present_loc.p);
+#else
 		location_t* fanout_loc = fanout[i]->present_loc.Get();
+#endif
 		no_swap += fabs(old_loc->x - fanout_loc->x);
 		no_swap += fabs(old_loc->y - fanout_loc->y);
 		
diff -x .git -Naur parsec-2.1-prepatch/pkgs/libs/hooks/CMakeLists.txt parsec-2.1/pkgs/libs/hooks/CMakeLists.txt
--- parsec-2.1-prepatch/pkgs/libs/hooks/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ parsec-2.1/pkgs/libs/hooks/CMakeLists.txt	2017-03-20 19:07:30.000000000 +0000
@@ -0,0 +1,2 @@
+add_definitions(-D_GNU_SOURCE)
+add_library(parsec-hooks src/hooks.c)
